# GameDin Quantum Layer AWS Secrets Manager Setup
# Comprehensive secrets management for production quantum operations

---
# IAM Policy for Secrets Manager Access
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicy
metadata:
  name: gamedin-secrets-manager-policy
  namespace: gamedin-l3
spec:
  version: "2012-10-17"
  statement:
    # Allow read access to GameDin secrets
    - effect: Allow
      action:
        - secretsmanager:GetSecretValue
        - secretsmanager:DescribeSecret
      resource:
        - "arn:aws:secretsmanager:us-east-1:869935067006:secret:gamedin-quantum-*"
      condition:
        stringEquals:
          aws:RequestTag/Environment: "production"
    
    # Allow secret rotation
    - effect: Allow
      action:
        - secretsmanager:UpdateSecret
        - secretsmanager:RotateSecret
      resource:
        - "arn:aws:secretsmanager:us-east-1:869935067006:secret:gamedin-quantum-*"
      condition:
        stringEquals:
          aws:RequestTag/Environment: "production"
    
    # Allow listing secrets (for discovery)
    - effect: Allow
      action:
        - secretsmanager:ListSecrets
      resource: "*"
      condition:
        stringEquals:
          aws:RequestTag/Environment: "production"

---
# Service Account for Kubernetes to access AWS Secrets Manager
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gamedin-secrets-access
  namespace: gamedin-l3
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::869935067006:role/gamedin-secrets-manager-role

---
# RBAC Role for secrets access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-reader
  namespace: gamedin-l3
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
  resourceNames:
    - "gamedin-quantum-secrets"
    - "gamedin-blockchain-secrets"
    - "gamedin-ai-secrets"

---
# RBAC Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gamedin-secrets-reader-binding
  namespace: gamedin-l3
subjects:
- kind: ServiceAccount
  name: gamedin-secrets-access
  namespace: gamedin-l3
roleRef:
  kind: Role
  name: secrets-reader
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for secrets access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-access-policy
  namespace: gamedin-l3
spec:
  podSelector:
    matchLabels:
      app: quantum-computing
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: gamedin-l3
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: gamedin-l3
    ports:
    - protocol: TCP
      port: 9090
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gamedin-quantum-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true 