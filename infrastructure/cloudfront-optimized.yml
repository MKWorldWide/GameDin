AWSTemplateFormatVersion: '2010-09-09'
Description: 'GameDin Optimized CloudFront Distribution with Advanced Caching and Performance Features'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name (optional)
  
  CertificateArn:
    Type: String
    Default: ''
    Description: SSL certificate ARN for custom domain (optional)
  
  S3BucketName:
    Type: String
    Description: S3 bucket name for static assets

Resources:
  # Optimized CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'GameDin ${Environment} - Optimized for Performance and Cost'
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !Sub '${S3BucketName}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Ref AWS::Region
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          TrustedSigners:
            Enabled: false
            Quantity: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
          Compress: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt LambdaEdgeFunction.Version
        # Optimized cache behaviors for different asset types
        CacheBehaviors:
          # JavaScript files - aggressive caching with versioning
          - PathPattern: '*.js'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 31536000
            DefaultTTL: 31536000
            MaxTTL: 31536000
            Compress: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt LambdaEdgeFunction.Version
          
          # CSS files - aggressive caching
          - PathPattern: '*.css'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 31536000
            DefaultTTL: 31536000
            MaxTTL: 31536000
            Compress: true
          
          # Images - long-term caching
          - PathPattern: '*.{png,jpg,jpeg,gif,svg,webp,avif}'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 2592000
            DefaultTTL: 2592000
            MaxTTL: 2592000
            Compress: true
          
          # Fonts - very long-term caching
          - PathPattern: '*.{woff,woff2,ttf,eot}'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 31536000
            DefaultTTL: 31536000
            MaxTTL: 31536000
            Compress: true
          
          # API routes - no caching
          - PathPattern: '/api/*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - X-Requested-With
                - X-API-Key
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
            Compress: true
          
          # Assets with hash - aggressive caching
          - PathPattern: '/assets/*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedSigners:
              Enabled: false
              Quantity: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 31536000
            DefaultTTL: 31536000
            MaxTTL: 31536000
            Compress: true
        
        # Custom error responses for SPA routing
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 500
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        
        # Aliases and SSL configuration
        Aliases:
          - !If 
            - HasCustomDomain
            - !Ref DomainName
            - !Ref AWS::NoValue
        ViewerCertificate:
          !If
            - HasCustomDomain
            - CloudFrontDefaultCertificate: false
              AcmCertificateArn: !Ref CertificateArn
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
            - CloudFrontDefaultCertificate: true

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${Environment} environment'

  # Lambda@Edge Function for advanced optimizations
  LambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'gamedin-edge-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            
            // Add security headers
            headers['x-frame-options'] = [{ key: 'X-Frame-Options', value: 'DENY' }];
            headers['x-content-type-options'] = [{ key: 'X-Content-Type-Options', value: 'nosniff' }];
            headers['x-xss-protection'] = [{ key: 'X-XSS-Protection', value: '1; mode=block' }];
            headers['referrer-policy'] = [{ key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' }];
            headers['permissions-policy'] = [{ key: 'Permissions-Policy', value: 'camera=(), microphone=(), geolocation=(), interest-cohort=()' }];
            
            // Add performance headers
            headers['x-dns-prefetch-control'] = [{ key: 'X-DNS-Prefetch-Control', value: 'on' }];
            headers['x-permitted-cross-domain-policies'] = [{ key: 'X-Permitted-Cross-Domain-Policies', value: 'none' }];
            
            // Add caching headers based on file type
            const uri = request.uri;
            if (uri.endsWith('.js') || uri.endsWith('.css')) {
              headers['cache-control'] = [{ key: 'Cache-Control', value: 'public, max-age=31536000, immutable' }];
            } else if (uri.match(/\.(png|jpg|jpeg|gif|svg|webp|avif)$/)) {
              headers['cache-control'] = [{ key: 'Cache-Control', value: 'public, max-age=2592000' }];
            } else if (uri.match(/\.(woff|woff2|ttf|eot)$/)) {
              headers['cache-control'] = [{ key: 'Cache-Control', value: 'public, max-age=31536000, immutable' }];
            } else if (uri === '/index.html') {
              headers['cache-control'] = [{ key: 'Cache-Control', value: 'no-cache, must-revalidate' }];
            }
            
            return request;
          };
      Timeout: 5
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  # Lambda@Edge Execution Role
  LambdaEdgeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'gamedin-edge-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CloudWatch Dashboard for monitoring
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'GameDin-${Environment}-Performance-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "Requests", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "BytesDownloaded", ".", "." ],
                  [ ".", "TotalErrorRate", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "CloudFront Performance Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "CacheHitRate", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "4xxErrorRate", ".", "." ],
                  [ ".", "5xxErrorRate", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "CloudFront Cache and Error Rates",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "gamedin-edge-${Environment}" ],
                  [ ".", "Invocations", ".", "." ],
                  [ ".", "Errors", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda@Edge Performance",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "OriginLatency", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "OriginResponseTime", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Origin Performance",
                "period": 300
              }
            }
          ]
        }

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionDomainName'

  WebsiteURL:
    Description: URL of the website
    Value: !If
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  LambdaEdgeFunctionArn:
    Description: Lambda@Edge function ARN
    Value: !GetAtt LambdaEdgeFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaEdgeFunctionArn' 