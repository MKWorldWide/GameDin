name: GameDin CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci --ignore-scripts
          
      - name: Run linting
        run: |
          cd frontend
          npm run lint
          
      - name: Run type checking
        run: |
          cd frontend
          npm run type-check
          
      - name: Run tests
        run: |
          cd frontend
          npm run test:ci
          
      - name: Build application
        run: |
          cd frontend
          npm run build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: frontend/dist/
          retention-days: 1

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci --ignore-scripts
          
      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level=moderate
          
      - name: Run dependency check
        run: |
          cd frontend
          npm run security:check

  # AWS Amplify Deployment Job
  deploy-amplify:
    name: Deploy to AWS Amplify
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to Amplify
        run: |
          # Install Amplify CLI
          npm install -g @aws-amplify/cli
          
          # Configure Amplify
          amplify configure --yes
          
          # Deploy the application
          amplify push --yes
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi

  # Preview Deployment Job
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy preview to Amplify
        run: |
          # Install Amplify CLI
          npm install -g @aws-amplify/cli
          
          # Configure Amplify
          amplify configure --yes
          
          # Deploy preview
          amplify push --yes --env-name preview
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'preview'
            });
            
            if (deployments.length > 0) {
              const deployment = deployments[0];
              const previewUrl = `https://${deployment.environment_url}`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚀 **Preview Deployment Ready!**
                
                **Preview URL:** ${previewUrl}
                **Deployment ID:** ${deployment.id}
                **Status:** ${deployment.status}
                
                This preview will be available for 7 days.`
              });
            }

  # Performance Testing Job
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-amplify
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Cleanup Job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-amplify, deploy-preview, performance-test]
    if: always()
    
    steps:
      - name: Cleanup artifacts
        run: |
          echo "🧹 Cleaning up build artifacts..."
          
      - name: Notify completion
        run: |
          echo "✅ CI/CD pipeline completed!"
          echo "📊 Summary:"
          echo "  - Build: ${{ needs.build-and-test.result }}"
          echo "  - Security: ${{ needs.security-scan.result }}"
          echo "  - Deployment: ${{ needs.deploy-amplify.result || needs.deploy-preview.result }}"
          echo "  - Performance: ${{ needs.performance-test.result }}" 