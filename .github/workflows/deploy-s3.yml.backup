name: Deploy to AWS S3

# Trigger deployment on push to main branch or manual workflow dispatch
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

# Environment-specific variables
env:
  AWS_REGION: us-east-1

jobs:
  # Test and build job
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        cd frontend && npm ci --legacy-peer-deps
        
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run type checking
      run: |
        cd frontend
        npm run typecheck
        
    - name: Run tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        VITE_APP_ENV: ${{ github.event_name == 'pull_request' && 'development' || github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: frontend/dist/
        retention-days: 1

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: frontend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to S3
      run: |
        # Create S3 bucket if it doesn't exist
        aws s3 mb s3://gamedin-dev --region ${{ env.AWS_REGION }} || true
        
        # Configure bucket for static website hosting
        aws s3api put-bucket-website \
          --bucket gamedin-dev \
          --website-configuration '{"IndexDocument":{"Suffix":"index.html"},"ErrorDocument":{"Key":"index.html"}}' || true
        
        # Set bucket policy for public read access
        aws s3api put-bucket-policy \
          --bucket gamedin-dev \
          --policy '{"Version":"2012-10-17","Statement":[{"Sid":"PublicReadGetObject","Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::gamedin-dev/*"}]}' || true
        
        # Upload files with proper cache headers
        aws s3 sync frontend/dist/ s3://gamedin-dev \
          --delete \
          --cache-control "max-age=31536000,public" \
          --exclude "*.html" \
          --exclude "*.json" \
          --exclude "*.xml"
          
        aws s3 sync frontend/dist/ s3://gamedin-dev \
          --delete \
          --cache-control "no-cache,no-store,must-revalidate" \
          --include "*.html" \
          --include "*.json" \
          --include "*.xml"
          
    - name: Invalidate CloudFront cache
      run: |
        # Get CloudFront distribution ID
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?contains(Origins.Items[0].DomainName, 'gamedin-dev')].Id" \
          --output text)
        
        if [ "$DISTRIBUTION_ID" != "None" ] && [ -n "$DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"
        fi

  # Deploy to production environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: frontend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to S3
      run: |
        # Create S3 bucket if it doesn't exist
        aws s3 mb s3://gamedin-prod --region ${{ env.AWS_REGION }} || true
        
        # Configure bucket for static website hosting
        aws s3api put-bucket-website \
          --bucket gamedin-prod \
          --website-configuration '{"IndexDocument":{"Suffix":"index.html"},"ErrorDocument":{"Key":"index.html"}}' || true
        
        # Set bucket policy for public read access
        aws s3api put-bucket-policy \
          --bucket gamedin-prod \
          --policy '{"Version":"2012-10-17","Statement":[{"Sid":"PublicReadGetObject","Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::gamedin-prod/*"}]}' || true
        
        # Upload files with proper cache headers
        aws s3 sync frontend/dist/ s3://gamedin-prod \
          --delete \
          --cache-control "max-age=31536000,public" \
          --exclude "*.html" \
          --exclude "*.json" \
          --exclude "*.xml"
          
        aws s3 sync frontend/dist/ s3://gamedin-prod \
          --delete \
          --cache-control "no-cache,no-store,must-revalidate" \
          --include "*.html" \
          --include "*.json" \
          --include "*.xml"
          
    - name: Invalidate CloudFront cache
      run: |
        # Get CloudFront distribution ID
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?contains(Origins.Items[0].DomainName, 'gamedin-prod')].Id" \
          --output text)
        
        if [ "$DISTRIBUTION_ID" != "None" ] && [ -n "$DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"
        fi

  # Post-deployment notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "Deployment completed for environment: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
