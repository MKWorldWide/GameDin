# GameDin Quantum Layer - Helm Chart Values
# Comprehensive configuration for quantum computing infrastructure

# Global configuration
global:
  environment: production
  clusterName: gamedin-l3-cluster
  region: us-east-1
  domain: quantum.gamedin.xyz
  imageRegistry: public.ecr.aws/gamedin-l3
  imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - name: gamedin-registry-secret

# Quantum Layer Core Configuration
quantumLayer:
  enabled: true
  replicaCount: 3
  
  # Image configuration
  image:
    repository: quantum-layer
    tag: "4.3.2"
    pullPolicy: IfNotPresent
    
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    annotations: {}
    
  # Ingress configuration
  ingress:
    enabled: true
    className: alb
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: ""
      alb.ingress.kubernetes.io/ssl-redirect: "443"
    hosts:
      - host: quantum.gamedin.xyz
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: quantum-tls
        hosts:
          - quantum.gamedin.xyz
          
  # Resource configuration
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
      
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  # Liveness and readiness probes
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    
  # Environment variables
  env:
    NODE_ENV: production
    QUANTUM_BACKEND: ibm_quantum
    QUANTUM_PROVIDER: ibm
    QUANTUM_DEVICE: ibmq_manila
    LOG_LEVEL: info
    
  # Secrets configuration
  secrets:
    quantumApiKey:
      secretName: quantum-api-secret
      secretKey: api-key
    quantumBackendUrl:
      secretName: quantum-backend-secret
      secretKey: url

# Quantum Task Processing
quantumTasks:
  enabled: true
  replicaCount: 5
  
  image:
    repository: quantum-tasks
    tag: "4.3.2"
    
  service:
    type: ClusterIP
    port: 8081
    targetPort: 8081
    
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi
      
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 30
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 80
    
  # Task queue configuration
  queue:
    redis:
      enabled: true
      host: redis-master
      port: 6379
      password: ""
      database: 0
      
  # Task types configuration
  taskTypes:
    entanglement_sync:
      enabled: true
      maxConcurrent: 100
      timeout: 30s
    ai_decision_tree:
      enabled: true
      maxConcurrent: 50
      timeout: 60s
    quantum_random:
      enabled: true
      maxConcurrent: 200
      timeout: 10s
    game_optimization:
      enabled: true
      maxConcurrent: 20
      timeout: 300s

# Blockchain Integration
blockchain:
  enabled: true
  replicaCount: 3
  
  image:
    repository: blockchain-node
    tag: "4.3.2"
    
  service:
    type: ClusterIP
    port: 8545
    targetPort: 8545
    
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi
      
  # Blockchain network configuration
  network:
    chainId: 1337
    gasLimit: 8000000
    gasPrice: 20000000000
    
  # Smart contracts configuration
  contracts:
    gameToken:
      address: "0x..."
      abi: []
    quantumOracle:
      address: "0x..."
      abi: []
    gameRegistry:
      address: "0x..."
      abi: []

# AI Service Integration
aiService:
  enabled: true
  replicaCount: 3
  
  image:
    repository: ai-service
    tag: "4.3.2"
    
  service:
    type: ClusterIP
    port: 8082
    targetPort: 8082
    
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi
      
  # AI model configuration
  models:
    novaSanctum:
      enabled: true
      modelPath: /models/nova-sanctum
      maxConcurrent: 10
    quantumAI:
      enabled: true
      modelPath: /models/quantum-ai
      maxConcurrent: 5

# Database Configuration
database:
  postgresql:
    enabled: true
    auth:
      postgresPassword: ""
      database: gamedin_quantum
    primary:
      persistence:
        enabled: true
        size: 100Gi
        storageClass: gp3
    readReplicas:
      persistence:
        enabled: true
        size: 50Gi
        storageClass: gp3
        
  redis:
    enabled: true
    auth:
      enabled: false
    master:
      persistence:
        enabled: true
        size: 20Gi
        storageClass: gp3
    replica:
      replicaCount: 2
      persistence:
        enabled: true
        size: 10Gi
        storageClass: gp3

# Monitoring Configuration
monitoring:
  enabled: true
  
  # Prometheus configuration
  prometheus:
    enabled: true
    prometheusSpec:
      retention: 30d
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: gp3
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
                
  # Grafana configuration
  grafana:
    enabled: true
    adminPassword: ""
    persistence:
      enabled: true
      size: 10Gi
      storageClassName: gp3
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'gamedin-quantum'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards
    dashboards:
      default:
        quantum-overview:
          gnetId: 0
          revision: 1
          datasource: Prometheus
          
  # AlertManager configuration
  alertmanager:
    enabled: true
    config:
      global:
        slack_api_url: ""
      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'slack-notifications'
      receivers:
        - name: 'slack-notifications'
          slack_configs:
            - channel: '#gamedin-alerts'
              send_resolved: true
              
  # Node Exporter configuration
  nodeExporter:
    enabled: true

# Security Configuration
security:
  # Network policies
  networkPolicies:
    enabled: true
    
  # Pod security policies
  podSecurityPolicies:
    enabled: true
    
  # RBAC configuration
  rbac:
    enabled: true
    create: true
    
  # Secrets management
  externalSecrets:
    enabled: true
    aws:
      region: us-east-1
      roleArn: ""
    secretStores:
      - name: aws-secrets-manager
        type: aws
        parameters:
          region: us-east-1
    externalSecrets:
      - name: quantum-secrets
        secretStoreRef:
          name: aws-secrets-manager
        data:
          - secretKey: quantum-api-key
            remoteRef:
              key: gamedin/quantum/api-key
          - secretKey: quantum-backend-url
            remoteRef:
              key: gamedin/quantum/backend-url

# AWS Configuration
aws:
  # Load Balancer Controller
  loadBalancerController:
    enabled: true
    clusterName: gamedin-l3-cluster
    region: us-east-1
    vpcId: ""
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: ""
        
  # Cluster Autoscaler
  clusterAutoscaler:
    enabled: true
    clusterName: gamedin-l3-cluster
    region: us-east-1
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: ""
    autoDiscovery:
      clusterName: gamedin-l3-cluster
      
  # Cert Manager
  certManager:
    enabled: true
    installCRDs: true
    replicaCount: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 30d
  storage:
    type: s3
    bucket: gamedin-quantum-backups
    region: us-east-1
    
# Logging Configuration
logging:
  enabled: true
  fluentd:
    enabled: true
    elasticsearch:
      host: ""
      port: 9200
      scheme: https
    s3:
      enabled: true
      bucket: gamedin-quantum-logs
      region: us-east-1
      
# Performance Configuration
performance:
  # Horizontal Pod Autoscaler
  hpa:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  # Vertical Pod Autoscaler
  vpa:
    enabled: true
    mode: Auto
    
  # Pod Disruption Budget
  pdb:
    enabled: true
    minAvailable: 2
    
  # Resource quotas
  resourceQuotas:
    enabled: true
    cpu: "20"
    memory: "40Gi"
    persistentvolumeclaims: "10"
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "40"
    limits.memory: "80Gi"

# Development Configuration
development:
  enabled: false
  debug: false
  hotReload: false
  localDevelopment: false 