# GameDin Quantum Layer Networking Configuration
# Comprehensive networking setup with SSL/TLS, custom domain, and API exposure

---
# AWS Load Balancer Controller for EKS
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/AmazonEKSLoadBalancerControllerRole

---
# AWS Load Balancer Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  labels:
    app: aws-load-balancer-controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aws-load-balancer-controller
  template:
    metadata:
      labels:
        app: aws-load-balancer-controller
    spec:
      serviceAccountName: aws-load-balancer-controller
      containers:
      - name: controller
        image: public.ecr.aws/eks/aws-load-balancer-controller:v2.7.1
        args:
        - --cluster-name=gamedin-l3-cluster
        - --aws-vpc-id=vpc-XXXXXXXXX
        - --aws-region=us-east-1
        - --ingress-class=alb
        - --feature-gates=waf_finalizer=true
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 61779
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 61779
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 9999
      securityContext:
        fsGroup: 9999

---
# AWS Load Balancer Controller Service
apiVersion: v1
kind: Service
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  labels:
    app: aws-load-balancer-controller
spec:
  ports:
  - port: 9443
    protocol: TCP
    targetPort: 9443
  selector:
    app: aws-load-balancer-controller
  type: ClusterIP

---
# Ingress Class for AWS ALB
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: alb
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: ingress.k8s.aws/alb

---
# Main Ingress for GameDin Quantum Layer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gamedin-quantum-ingress
  namespace: gamedin-l3
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:ACCOUNT_ID:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: '8080'
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/success-codes: '200,302'
    alb.ingress.kubernetes.io/group.name: gamedin-quantum
    alb.ingress.kubernetes.io/group.order: '1'
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP2
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/security-groups: sg-XXXXXXXXX
    alb.ingress.kubernetes.io/managed-security-groups: sg-XXXXXXXXX
    alb.ingress.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=production,Project=gamedin,Component=quantum
    alb.ingress.kubernetes.io/aws-load-balancer-name: gamedin-quantum-alb
    alb.ingress.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    alb.ingress.kubernetes.io/aws-load-balancer-access-logs-enabled: 'true'
    alb.ingress.kubernetes.io/aws-load-balancer-access-logs-s3-bucket: gamedin-logs
    alb.ingress.kubernetes.io/aws-load-balancer-access-logs-s3-prefix: quantum-alb
  labels:
    app: gamedin-quantum
    component: ingress
spec:
  rules:
  # Main quantum API
  - host: quantum.gamedin.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-computing
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: quantum-computing
            port:
              number: 8080
      - path: /health
        pathType: Exact
        backend:
          service:
            name: quantum-computing
            port:
              number: 8080
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: quantum-computing
            port:
              number: 8080
  # WebSocket endpoint
  - host: ws.quantum.gamedin.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-websocket
            port:
              number: 8081
  # Monitoring endpoints
  - host: monitoring.gamedin.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 80
  - host: prometheus.gamedin.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-server
            port:
              number: 9090

---
# WebSocket Service for Real-time Quantum Communication
apiVersion: v1
kind: Service
metadata:
  name: quantum-websocket
  namespace: gamedin-l3
  labels:
    app: quantum-computing
    component: websocket
spec:
  type: ClusterIP
  ports:
  - name: websocket
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: health
    port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    app: quantum-computing

---
# Network Policy for Quantum Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: quantum-network-policy
  namespace: gamedin-l3
spec:
  podSelector:
    matchLabels:
      app: quantum-computing
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
  # Allow internal quantum communication
  - from:
    - podSelector:
        matchLabels:
          app: quantum-computing
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow internal cluster communication
  - to:
    - namespaceSelector: {}

---
# DNS Configuration for Custom Domain
apiVersion: v1
kind: ConfigMap
metadata:
  name: dns-config
  namespace: gamedin-l3
data:
  dns.yaml: |
    # GameDin Quantum Layer DNS Configuration
    domains:
      quantum.gamedin.xyz:
        type: A
        ttl: 300
        records:
          - value: ALB_DNS_NAME
      ws.quantum.gamedin.xyz:
        type: A
        ttl: 300
        records:
          - value: ALB_DNS_NAME
      monitoring.gamedin.xyz:
        type: A
        ttl: 300
        records:
          - value: ALB_DNS_NAME
      prometheus.gamedin.xyz:
        type: A
        ttl: 300
        records:
          - value: ALB_DNS_NAME

---
# SSL Certificate Management
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@gamedin.xyz
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: alb

---
# Certificate for quantum.gamedin.xyz
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: quantum-gamedin-cert
  namespace: gamedin-l3
spec:
  secretName: quantum-gamedin-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - quantum.gamedin.xyz
  - ws.quantum.gamedin.xyz
  - monitoring.gamedin.xyz
  - prometheus.gamedin.xyz

---
# Certificate for WebSocket domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: websocket-gamedin-cert
  namespace: gamedin-l3
spec:
  secretName: websocket-gamedin-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - ws.quantum.gamedin.xyz

---
# API Gateway Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: gamedin-l3
data:
  gateway.yaml: |
    # GameDin Quantum API Gateway Configuration
    api:
      version: v1
      base_path: /api/v1
      cors:
        allowed_origins:
          - https://gamedin.xyz
          - https://quantum.gamedin.xyz
        allowed_methods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        allowed_headers:
          - Content-Type
          - Authorization
          - X-Requested-With
        allow_credentials: true
        max_age: 86400
      
      rate_limiting:
        enabled: true
        requests_per_minute: 1000
        burst_size: 100
        
      authentication:
        required: true
        methods:
          - jwt
          - api_key
        
      endpoints:
        quantum:
          - path: /quantum/task
            method: POST
            description: Submit quantum computing task
            rate_limit: 100
          - path: /quantum/status/{task_id}
            method: GET
            description: Get task status
            rate_limit: 1000
          - path: /quantum/result/{task_id}
            method: GET
            description: Get task result
            rate_limit: 1000
          - path: /quantum/queue
            method: GET
            description: Get task queue status
            rate_limit: 500
            
        websocket:
          - path: /ws/quantum
            description: WebSocket endpoint for real-time quantum communication
            protocols:
              - quantum-protocol-v1
              - json-rpc
            
        monitoring:
          - path: /health
            method: GET
            description: Health check endpoint
            rate_limit: 1000
          - path: /metrics
            method: GET
            description: Prometheus metrics endpoint
            rate_limit: 1000
          - path: /ready
            method: GET
            description: Readiness check endpoint
            rate_limit: 1000

---
# WebSocket Protocol Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: gamedin-l3
data:
  protocol.yaml: |
    # GameDin Quantum WebSocket Protocol Configuration
    websocket:
      protocols:
        quantum-protocol-v1:
          version: "1.0"
          features:
            - binary_messages
            - compression
            - heartbeat
            - reconnection
          
          message_types:
            task_submit:
              type: "task.submit"
              schema:
                task_id: string
                task_type: string
                parameters: object
                priority: integer
                
            task_status:
              type: "task.status"
              schema:
                task_id: string
                status: string
                progress: float
                estimated_completion: string
                
            task_result:
              type: "task.result"
              schema:
                task_id: string
                result: object
                metadata: object
                
            error:
              type: "error"
              schema:
                code: integer
                message: string
                details: object
                
            heartbeat:
              type: "heartbeat"
              schema:
                timestamp: string
                sequence: integer
      
      connection:
        max_connections: 10000
        connection_timeout: 30s
        heartbeat_interval: 30s
        heartbeat_timeout: 90s
        max_message_size: 1MB
        compression_threshold: 1024
        
      security:
        authentication_required: true
        rate_limiting:
          messages_per_second: 100
          connections_per_ip: 10
        cors:
          allowed_origins:
            - https://gamedin.xyz
            - https://quantum.gamedin.xyz

---
# Load Balancer Health Check Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
  namespace: gamedin-l3
data:
  health.yaml: |
    # GameDin Quantum Layer Health Check Configuration
    health_checks:
      quantum_computing:
        path: /health
        port: 8080
        protocol: HTTP
        interval: 30s
        timeout: 5s
        healthy_threshold: 2
        unhealthy_threshold: 3
        success_codes: [200, 302]
        
      websocket:
        path: /health
        port: 8082
        protocol: HTTP
        interval: 30s
        timeout: 5s
        healthy_threshold: 2
        unhealthy_threshold: 3
        success_codes: [200]
        
      monitoring:
        path: /health
        port: 80
        protocol: HTTP
        interval: 30s
        timeout: 5s
        healthy_threshold: 2
        unhealthy_threshold: 3
        success_codes: [200]

---
# Security Headers Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-headers
  namespace: gamedin-l3
data:
  headers.yaml: |
    # GameDin Quantum Layer Security Headers Configuration
    security_headers:
      # Content Security Policy
      Content-Security-Policy: |
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net;
        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
        font-src 'self' https://fonts.gstatic.com;
        img-src 'self' data: https:;
        connect-src 'self' wss://ws.quantum.gamedin.xyz https://api.gamedin.xyz;
        frame-ancestors 'none';
        base-uri 'self';
        form-action 'self';
        
      # HTTP Strict Transport Security
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
      
      # X-Content-Type-Options
      X-Content-Type-Options: "nosniff"
      
      # X-Frame-Options
      X-Frame-Options: "DENY"
      
      # X-XSS-Protection
      X-XSS-Protection: "1; mode=block"
      
      # Referrer Policy
      Referrer-Policy: "strict-origin-when-cross-origin"
      
      # Permissions Policy
      Permissions-Policy: "geolocation=(), microphone=(), camera=()"
      
      # Cache Control
      Cache-Control: "no-cache, no-store, must-revalidate"
      Pragma: "no-cache"
      Expires: "0"

---
# CORS Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cors-config
  namespace: gamedin-l3
data:
  cors.yaml: |
    # GameDin Quantum Layer CORS Configuration
    cors:
      allowed_origins:
        - https://gamedin.xyz
        - https://quantum.gamedin.xyz
        - https://www.gamedin.xyz
        - https://app.gamedin.xyz
        
      allowed_methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
        - PATCH
        
      allowed_headers:
        - Content-Type
        - Authorization
        - X-Requested-With
        - X-API-Key
        - X-Client-Version
        - X-Request-ID
        
      exposed_headers:
        - X-Total-Count
        - X-Page-Count
        - X-Rate-Limit-Remaining
        - X-Rate-Limit-Reset
        
      allow_credentials: true
      max_age: 86400
      preflight_continue: false 