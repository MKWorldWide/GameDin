name: GameDin
enableBranchAutoBuild: true
environmentVariables:
  AMPLIFY_MONOREPO_APP_ROOT: frontend
  NODE_OPTIONS: --max-old-space-size=4096
  NODE_ENV: production
  NODE_VERSION: 20
  REDIS_TLS_ENABLED: true
  REDIS_CLUSTER_MODE: true

backend:
  phases:
    preBuild:
      commands:
        - npm ci
        - npm install -g @aws-amplify/cli@latest
    build:
      commands:
        - amplify push --yes
  artifacts:
    baseDirectory: amplify/backend
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*

frontend:
  phases:
    preBuild:
      commands:
        - npm ci --prefer-offline
        - npm run type-check
    build:
      commands:
        - npm run build
        - npm run generate-sitemap
    postBuild:
      commands:
        - npm run test:ci
  artifacts:
    baseDirectory: frontend/dist
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - frontend/.next/cache/**/*

test:
  phases:
    test:
      commands:
        - npm run test:ci -- --coverage
        - npm run test:e2e:ci
  artifacts:
    baseDirectory: coverage
    files:
      - '**/*'
    configFilePath: '**/jest-*.json'

customHeaders:
  - pattern: '**/*'
    headers:
      - key: Strict-Transport-Security
        value: max-age=31536000; includeSubDomains; preload
      - key: X-Frame-Options
        value: DENY
      - key: X-Content-Type-Options
        value: nosniff
      - key: X-XSS-Protection
        value: 1; mode=block
      - key: Referrer-Policy
        value: strict-origin-when-cross-origin
      - key: Permissions-Policy
        value: camera=(), microphone=(), geolocation=(), interest-cohort=()
      - key: Content-Security-Policy
        value: "default-src 'self'; connect-src 'self' https://*.amazonaws.com https://*.amazoncognito.com; img-src 'self' data: https: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.amazonaws.com; style-src 'self' 'unsafe-inline'; font-src 'self' data:; object-src 'none'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';"

performance:
  maxConcurrentUsers: 1000
  autoscaling:
    computeType: large
    minSize: 1
    maxSize: 10
    targetUtilization: 70
  caching:
    ttl: 3600
    queryStringBehavior: ignore
    cookieBehavior: none

security:
  enableWAF: true
  wafRules:
    - name: AWSManagedRulesCommonRuleSet
      priority: 1
      overrideAction: none
    - name: AWSManagedRulesKnownBadInputsRuleSet
      priority: 2
      overrideAction: none
    - name: AWSManagedRulesSQLiRuleSet
      priority: 3
      overrideAction: none
    - name: RateLimit
      priority: 4
      action: block
      rateLimit:
        limit: 2000
        aggregateBy: IP
  enableShieldAdvanced: true
  enableGuardDuty: true
  enableSecurityHub: true

monitoring:
  alerts:
    - name: HighErrorRate
      metric: 5XXError
      threshold: 5
      evaluationPeriods: 2
      period: 300
      statistic: Average
      comparison: GreaterThanThreshold
      notifyEmail: alerts@gamedin.com
    - name: HighLatency
      metric: Latency
      threshold: 1000
      evaluationPeriods: 2
      period: 300
      statistic: Average
      comparison: GreaterThanThreshold
      notifyEmail: alerts@gamedin.com

branches:
  main:
    framework: vite
    stage: production
    environmentVariables:
      - name: VITE_APP_ENV
        value: production
    cache:
      paths:
        - node_modules/**/*
        - frontend/dist/**/*
    build:
      commands:
        - npm run build:production
    test:
      commands:
        - npm run test:ci
    deploy:
      - type: cloudfront
        distributionId: ${CLOUDFRONT_DISTRIBUTION_ID}
        invalidatePaths: '/*'
      - type: s3
        bucket: ${DEPLOYMENT_BUCKET}
        path: /
    postDeploy:
      - npm run post-deploy-hooks

  staging:
    framework: vite
    stage: staging
    environmentVariables:
      - name: VITE_APP_ENV
        value: staging
    cache:
      paths:
        - node_modules/**/*
        - frontend/dist/**/*
    build:
      commands:
        - npm run build:staging
    test:
      commands:
        - npm run test:ci
    deploy:
      - type: cloudfront
        distributionId: ${STAGING_CLOUDFRONT_DISTRIBUTION_ID}
        invalidatePaths: '/*'
      - type: s3
        bucket: ${STAGING_DEPLOYMENT_BUCKET}
        path: /
    postDeploy:
      - npm run post-deploy-hooks 